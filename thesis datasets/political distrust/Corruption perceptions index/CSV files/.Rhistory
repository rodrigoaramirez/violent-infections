theme_minimal()
ggplot(data = mtcars, aes(x = wt, y = mpg)) +
geom_point() +
geom_smooth(method = "lm") +
theme_minimal()
ggplot(data = mtcars, aes(x = wt, y = mpg)) +
geom_point() +
geom_smooth(method = "lm") +
theme_minimal()
ggplot(data = mtcars, aes(x = wt, y = mpg)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
theme_minimal()
ggplot(data = mtcars, aes(x = wt, y = mpg)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
theme_minimal() +
facet_wrap(. ~ am)
# Define UI for application that draws a histogram
ui <- fluidPage(
# Application title
titlePanel("Exploring mtcars"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
sliderInput("bins",
"Number of bins:",
min = 1,
max = 50,
value = 30)
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("distPlot")
)
)
)
library(shiny)
# Define UI for application that draws a histogram
ui <- fluidPage(
# Application title
titlePanel("Exploring mtcars"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
sliderInput("bins",
"Number of bins:",
min = 1,
max = 50,
value = 30)
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("distPlot")
)
)
)
# Define server logic required to draw a histogram
server <- function(input, output) {
output$distPlot <- renderPlot({
# generate bins based on input$bins from ui.R
x    <- faithful[, 2]
bins <- seq(min(x), max(x), length.out = input$bins + 1)
# draw the histogram with the specified number of bins
hist(x, breaks = bins, col = 'darkgray', border = 'white')
})
}
# Run the application
shinyApp(ui = ui, server = server)
# Define server logic required to draw a scatterplot
server <- function(input, output) {
output$distPlot <- renderPlot({
# draw the scatterplot
ggplot(mtcars, aes(x = mpg, y = hp)) +
geom_point() +
theme_minimal()
})
}
# Run the application
shinyApp(ui = ui, server = server)
# Define UI for application that draws a histogram
ui <- fluidPage(
# Application title
titlePanel("Exploring mtcars"),
# Sidebar with a slider input for dot size
sidebarLayout(
sidebarPanel(
sliderInput(inputId = "point_size",
label = "dot size",
min = .5,
max = 10,
value = 2)
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("distPlot")
)
)
)
# Define server logic required to draw a scatterplot
server <- function(input, output) {
output$distPlot <- renderPlot({
# draw the scatterplot
ggplot(mtcars, aes(x = mpg, y = hp)) +
geom_point() +
theme_minimal()
})
}
# Run the application
shinyApp(ui = ui, server = server)
# Define server logic required to draw a scatterplot
server <- function(input, output) {
output$distPlot <- renderPlot({
# draw the scatterplot
ggplot(mtcars, aes(x = mpg, y = hp)) +
geom_point(size = input$point_size) +
theme_minimal()
})
}
# Run the application
shinyApp(ui = ui, server = server)
# Define UI for application that draws a histogram
ui <- fluidPage(
# Application title
titlePanel("Exploring mtcars"),
# Sidebar with a slider input for dot size
sidebarLayout(
sidebarPanel(
sliderInput(inputId = "point_size",
label = "dot size",
min = .5,
max = 10,
value = 2),
selectInput(inputId = "xvar",
label = "x variable",
choices = list("mpg" = mpg, "wt" = wt, "hp" = hp),
selected = mpg),
selectInput(inputId = "yvar",
label = "y variable",
choices = list("mpg" = mpg, "wt" = wt, "hp" = hp),
selected = mpg)
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("distPlot")
)
)
)
runApp('C:/Users/roram/Desktop/shiny-ggplot')
runApp('C:/Users/roram/Desktop/shiny-ggplot')
runApp('C:/Users/roram/Desktop/shiny-ggplot')
runApp('C:/Users/roram/Desktop/shiny-ggplot')
names(mtcars)
runApp('C:/Users/roram/Desktop/shiny-ggplot')
runApp('C:/Users/roram/Desktop/shiny-ggplot')
# Define UI for application that draws a histogram
ui <- fluidPage(
# Application title
titlePanel("Exploring mtcars"),
# Sidebar with a slider input for dot size
sidebarLayout(
sidebarPanel(
sliderInput(inputId = "point_size",
label = "dot size",
min = .5,
max = 10,
value = 2),
selectInput(inputId = "xvar",
label = "x variable",
choices = names(mtcars)[1:7]),
selected = mpg),
selectInput(inputId = "yvar",
label = "y variable",
choices = list(names(mtcars)[1:7]),
selected = mpg)
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("distPlot")
)
)
# Define UI for application that draws a histogram
ui <- fluidPage(
# Application title
titlePanel("Exploring mtcars"),
# Sidebar with a slider input for dot size
sidebarLayout(
sidebarPanel(
sliderInput(inputId = "point_size",
label = "dot size",
min = .5,
max = 10,
value = 2),
selectInput(inputId = "xvar",
label = "x variable",
choices = names(mtcars)[1:7]),
selected = mpg),
selectInput(inputId = "yvar",
label = "y variable",
choices = list(names(mtcars)[1:7]),
selected = mpg)
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("distPlot")
)
)
runApp('C:/Users/roram/Desktop/shiny-ggplot')
# draw the scatterplot
ggplot(mtcars, aes_string(x = input$xvar, y = input$yvar)) +
geom_point(size = input$point_size) +
stat_smooth() +
theme_minimal()
runApp('C:/Users/roram/Desktop/shiny-ggplot')
runApp('C:/Users/roram/Desktop/shiny-ggplot')
# Define UI for application that draws a histogram
ui <- fluidPage(
# Application title
titlePanel("Exploring mtcars"),
# Sidebar with a slider input for dot size
sidebarLayout(
sidebarPanel(
sliderInput(inputId = "point_size",
label = "dot size",
min = .5,
max = 10,
value = 2),
selectInput(inputId = "xvar",
label = "x variable",
choices = names(mtcars)[1:7],
selected = mpg),
selectInput(inputId = "yvar",
label = "y variable",
choices = names(mtcars)[1:7],
selected = hp)
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("distPlot")
)
)
)
runApp('C:/Users/roram/Desktop/shiny-ggplot')
runApp('C:/Users/roram/Desktop/shiny-ggplot')
runApp('C:/Users/roram/Desktop/shiny-ggplot')
runApp('C:/Users/roram/Desktop/shiny-ggplot')
runApp('C:/Users/roram/Desktop/shiny-ggplot')
runApp('C:/Users/roram/Desktop/shiny-ggplot')
runApp('C:/Users/roram/Desktop/shiny-ggplot')
runApp('C:/Users/roram/Desktop/shiny-ggplot')
runApp('C:/Users/roram/Desktop/shiny-ggplot')
portfolio <- function(start_bal = 1000000,
withdrawal = .04,
return_ave = .09,
ret_vol = .1,
inf_ave = .03,
inf_vol = .035,
nsims = 3) {
(start_bal - (start_bal * withdrawal)) * (1 = return_ave) - ((start_bal * withdrawal) * (1 + inf_ave))
}
portfolio()
portfolio <- function(start_bal = 1000000,
withdrawal = .04,
return_ave = .09,
ret_vol = .1,
inf_ave = .03,
inf_vol = .035,
nsims = 3) {
(start_bal - (start_bal * withdrawal)) * (1 + return_ave) - ((start_bal * withdrawal) * (1 + inf_ave))
}
portfolio()
pacman::p_load(usingr)
pacman::p_load(usingR)
pacman::p_load("usingR")
pacman::p_load("usingR")
install.packages(usingR)
pacman::p_load(UsingR)
install.packages(UsingR)
View(.park)
View(.park)
central.park
pacman::p_load(tidyverse)
rm(list = ls())
setwd("~/thesis datasets/political distrust/Corruption perceptions index/CSV files/")
dta_12_19 <- read_csv("Consolidated_Data_CPI_2012-2019.csv")
dta_10 <- read_csv("CPI-2010-new_200601_105629.csv")
dta_11 <- read_csv("CPI-2011-new_200601_104308.csv")
sort(unique(dta_12_19$Country))
View(dta_12_19)
sort(unique(dta_12_19$Country))
dta_12_19_std <-
dta_12_19 %>%
mutate(Country = case_when(Country == "Argenana" ~ "Argentina",
Country == "Bosnia and" ~ "Bosnia and Herzegovina",
Country == "Brunei Dar" ~ "Brunei Darussalam",
Country == "Burkina Fas" ~ "Burkina Faso",
Country == "Central Afri" ~ "Central African Republic",
Country == "Croaaa" ~ "Croatia",
Country == "Czech Repu" ~ "Czechia",
Country == "Democraac" ~ "Democratic Republic of the Congo",
Country == "Djiboua" ~ "Djibouti",
Country == "Dominican" ~ "Dominican Republic",
Country == "Equatorial" ~ "Equatorial Guinea",
Country == "Eswaani" ~ "Eswatini",
Country == "Guinea Biss" ~ "Guinea Bissau",
Country == "Haia" ~ "Haiti",
Country == "Korea, Nort" ~ "Korea, North",
Country == "Korea, Sout" ~ "Korea, South",
Country == "Luxembour" ~ "Luxembourg",
Country == "Madagasca" ~ "Madagascar",
Country == "Mauriaus" ~ "Mauritius",
Country == "Montenegr" ~ "Montenegro",
Country == "Mozambiq" ~ "Mozambique",
Country == "Netherland" ~ "Netherlands",
Country == "New Zealan" ~ "New Zealand",
Country == "North Mac" ~ "North Macedonia",
Country == "Papua New" ~ "Papua New Guinea",
Country == "Saint Vince" ~ "Saint Vincent and the Grenadines",
Country == "Sao Tome a" ~ "Sao Tome and Principe",
Country == "Saudi Arabi" ~ "Saudi Arabia",
Country == "Sierra Leon" ~ "Sierra Leon",
Country == "Solomon Is" ~ "Solomon Islands",
Country == "South Afric" ~ "South Africa",
Country == "South Suda" ~ "South Sudan",
Country == "Trinidad an" ~ "Trinidad and Tobago",
Country == "Turkmenist" ~ "Turkmenistan",
Country == "United Ara" ~ "United Arab Emirates",
Country == "United King" ~ "United Kingdom",
Country == "United Stat" ~ "United States",
TRUE ~ as.character(Country)
)
)
sort(unique(dta_12_19$Country))
dta_10_std <-
dta_10 %>%
mutate(score = score*10) %>%
select(Country = country,
ISO3 = iso,
Region = region,
CPI_Score,
Rank,
Sources, Standard_Error)
View(dta_10)
sort(unique(dta_12_19$Country))
dta_12_19_std <-
dta_12_19 %>%
mutate(Country = case_when(Country == "Argenana" ~ "Argentina",
Country == "Bosnia and" ~ "Bosnia and Herzegovina",
Country == "Brunei Dar" ~ "Brunei Darussalam",
Country == "Burkina Fas" ~ "Burkina Faso",
Country == "Central Afri" ~ "Central African Republic",
Country == "Croaaa" ~ "Croatia",
Country == "Czech Repu" ~ "Czechia",
Country == "Democraac" ~ "Democratic Republic of the Congo",
Country == "Djiboua" ~ "Djibouti",
Country == "Dominican" ~ "Dominican Republic",
Country == "Equatorial" ~ "Equatorial Guinea",
Country == "Eswaani" ~ "Eswatini",
Country == "Guinea Biss" ~ "Guinea Bissau",
Country == "Haia" ~ "Haiti",
Country == "Korea, Nort" ~ "Korea, North",
Country == "Korea, Sout" ~ "Korea, South",
Country == "Luxembour" ~ "Luxembourg",
Country == "Madagasca" ~ "Madagascar",
Country == "Mauriaus" ~ "Mauritius",
Country == "Montenegr" ~ "Montenegro",
Country == "Mozambiq" ~ "Mozambique",
Country == "Netherland" ~ "Netherlands",
Country == "New Zealan" ~ "New Zealand",
Country == "North Mac" ~ "North Macedonia",
Country == "Papua New" ~ "Papua New Guinea",
Country == "Saint Vince" ~ "Saint Vincent and the Grenadines",
Country == "Sao Tome a" ~ "Sao Tome and Principe",
Country == "Saudi Arabi" ~ "Saudi Arabia",
Country == "Sierra Leon" ~ "Sierra Leon",
Country == "Solomon Is" ~ "Solomon Islands",
Country == "South Afric" ~ "South Africa",
Country == "South Suda" ~ "South Sudan",
Country == "Trinidad an" ~ "Trinidad and Tobago",
Country == "Turkmenist" ~ "Turkmenistan",
Country == "United Ara" ~ "United Arab Emirates",
Country == "United King" ~ "United Kingdom",
Country == "United Stat" ~ "United States",
TRUE ~ as.character(Country)
)
)
sort(unique(dta_12_19$Country))
dta_12_19_std <-
dta_12_19 %>%
mutate(score = score*10) %>%
select(Country = country,
ISO3 = iso,
Region = region,
CPI_Score,
Rank,
Sources, Standard_Error)
sort(unique(dta_12_19$Country))
dta_12_19_std <-
dta_12_19 %>%
mutate(Country = case_when(Country == "Argenana" ~ "Argentina",
Country == "Bosnia and" ~ "Bosnia and Herzegovina",
Country == "Brunei Dar" ~ "Brunei Darussalam",
Country == "Burkina Fas" ~ "Burkina Faso",
Country == "Central Afri" ~ "Central African Republic",
Country == "Croaaa" ~ "Croatia",
Country == "Czech Repu" ~ "Czechia",
Country == "Democraac" ~ "Democratic Republic of the Congo",
Country == "Djiboua" ~ "Djibouti",
Country == "Dominican" ~ "Dominican Republic",
Country == "Equatorial" ~ "Equatorial Guinea",
Country == "Eswaani" ~ "Eswatini",
Country == "Guinea Biss" ~ "Guinea Bissau",
Country == "Haia" ~ "Haiti",
Country == "Korea, Nort" ~ "Korea, North",
Country == "Korea, Sout" ~ "Korea, South",
Country == "Luxembour" ~ "Luxembourg",
Country == "Madagasca" ~ "Madagascar",
Country == "Mauriaus" ~ "Mauritius",
Country == "Montenegr" ~ "Montenegro",
Country == "Mozambiq" ~ "Mozambique",
Country == "Netherland" ~ "Netherlands",
Country == "New Zealan" ~ "New Zealand",
Country == "North Mac" ~ "North Macedonia",
Country == "Papua New" ~ "Papua New Guinea",
Country == "Saint Vince" ~ "Saint Vincent and the Grenadines",
Country == "Sao Tome a" ~ "Sao Tome and Principe",
Country == "Saudi Arabi" ~ "Saudi Arabia",
Country == "Sierra Leon" ~ "Sierra Leon",
Country == "Solomon Is" ~ "Solomon Islands",
Country == "South Afric" ~ "South Africa",
Country == "South Suda" ~ "South Sudan",
Country == "Trinidad an" ~ "Trinidad and Tobago",
Country == "Turkmenist" ~ "Turkmenistan",
Country == "United Ara" ~ "United Arab Emirates",
Country == "United King" ~ "United Kingdom",
Country == "United Stat" ~ "United States",
TRUE ~ as.character(Country)
)
)
sort(unique(dta_12_19$Country))
dta_12_19_std <-
dta_12_19 %>%
select(Country = country,
ISO3 = iso,
Region = region,
CPI_Score,
Rank,
Sources, Standard_Error)
sort(unique(dta_12_19$Country))
dta_12_19_std <-
dta_12_19 %>%
mutate(Country = case_when(Country == "Argenana" ~ "Argentina",
Country == "Bosnia and" ~ "Bosnia and Herzegovina",
Country == "Brunei Dar" ~ "Brunei Darussalam",
Country == "Burkina Fas" ~ "Burkina Faso",
Country == "Central Afri" ~ "Central African Republic",
Country == "Croaaa" ~ "Croatia",
Country == "Czech Repu" ~ "Czechia",
Country == "Democraac" ~ "Democratic Republic of the Congo",
Country == "Djiboua" ~ "Djibouti",
Country == "Dominican" ~ "Dominican Republic",
Country == "Equatorial" ~ "Equatorial Guinea",
Country == "Eswaani" ~ "Eswatini",
Country == "Guinea Biss" ~ "Guinea Bissau",
Country == "Haia" ~ "Haiti",
Country == "Korea, Nort" ~ "Korea, North",
Country == "Korea, Sout" ~ "Korea, South",
Country == "Luxembour" ~ "Luxembourg",
Country == "Madagasca" ~ "Madagascar",
Country == "Mauriaus" ~ "Mauritius",
Country == "Montenegr" ~ "Montenegro",
Country == "Mozambiq" ~ "Mozambique",
Country == "Netherland" ~ "Netherlands",
Country == "New Zealan" ~ "New Zealand",
Country == "North Mac" ~ "North Macedonia",
Country == "Papua New" ~ "Papua New Guinea",
Country == "Saint Vince" ~ "Saint Vincent and the Grenadines",
Country == "Sao Tome a" ~ "Sao Tome and Principe",
Country == "Saudi Arabi" ~ "Saudi Arabia",
Country == "Sierra Leon" ~ "Sierra Leon",
Country == "Solomon Is" ~ "Solomon Islands",
Country == "South Afric" ~ "South Africa",
Country == "South Suda" ~ "South Sudan",
Country == "Trinidad an" ~ "Trinidad and Tobago",
Country == "Turkmenist" ~ "Turkmenistan",
Country == "United Ara" ~ "United Arab Emirates",
Country == "United King" ~ "United Kingdom",
Country == "United Stat" ~ "United States",
TRUE ~ as.character(Country)
)
)
sort(unique(dta_12_19$Country))
dta_12_19_std <-
dta_12_19 %>%
select(Country,
ISO3,
Region,
CPI_Score,
Rank,
Sources, Standard_Error)
ls(dta_12_19_std)
dta_10
sort(unique(dta_10$country))
dta_10_std <-
dta_10 %>%
mutate(score = score*10) %>%
select(Country = country,
ISO3 = iso,
Region = region,
CPI_Score = score,
Rank = rank)
View(dta_10_std)
