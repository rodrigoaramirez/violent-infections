mpg_mean = mean(mpg),
mpg_sd = sd(mpg))
t.test(cars_data_3$mpg,
cars_data_3$horsepow)
pacman::p_load(tidyverse)
cars_dat <- read_csv("~/datasets/car_sales.csv")
cars_dat_2 <-
cars_dat %>%
filter(manufact %in% c("Ford", "Chevrolet", "Nissan")) %>%
select(manufact, horsepow, mpg)
View(cars_dat_2)
cars_data_3 <- cars_data_2
cars_data_2 <-
cars_dat %>%
filter(manufact %in% c("Ford", "Chevrolet", "Nissan")) %>%
select(manufact, horsepow, mpg)
summary(filt_cars_dat)
cars_data_3 <- cars_data_2
cars_data_3 %>%
group_by(manufact) %>%
summarize(hp_mean = mean(horsepow),
hp_sd = sd(horsepow),
mpg_mean = mean(mpg),
mpg_sd = sd(mpg))
View(cars_data_3)
cars_data_3$horsepow <- as.numeric(cars_data_3$horsepow)
is.numeric(cars_data_3$horsepow)
cars_data_3$mpg <- as.numeric(cars_data_3$mpg)
cars_data_3 %>%
group_by(manufact) %>%
summarize(hp_mean = mean(horsepow),
hp_sd = sd(horsepow),
mpg_mean = mean(mpg),
mpg_sd = sd(mpg))
cor(cars_data_3$mpg,
cars_data_3$horsepow,
use = "everything",
method = "pearson")
t.test(cars_data_3$mpg,
cars_data_3$horsepow)
?aov
aov(mpg, data = cars_data_3)
aov(Ford ~ Chevrolet, data = cars_data_3)
aov(manufact ~ mpg, data = cars_data_3)
model1 <- lm(manufact ~ horsepow, data = cars_data_3)
pacman::p_load(tidyverse, ggplot2)
read_csv(race_data.csv)
read_csv("race_data.csv")
read_csv(~/Downloads, "race_data.csv")
read_csv("~/Downloads/race_data.csv")
read_csv("C:/Users/roram/Downloads/race_data.csv")
race_data <- read_csv("C:/Users/roram/Downloads/race_data.csv")
View(race_data)
race_data_cleaned <-
race_data %>%
separate(`Date/Time (UTC)`, into = c("Date", "Time"), sep = " ")
View(race_data_cleaned)
race_data_cutoff <-
race_data %>%
filter(`Race #` >= 200)
race_data_cutoff <-
race_data %>%
mutate(ifelse(`Race #` >= 200, 1, 0))
race_data <- read_csv("C:/Users/roram/Downloads/race_data.csv")
race_data_cutoff <-
race_data %>%
mutate(ifelse(`Race #` >= 200, 1, 0))
View(race_data_cutoff)
#dev version of haven install
devtools::install_github("tidyverse/haven")
library(foreign)
library(haven)
setwd("C:/Users/roram/Dropbox/TESS Generalizability/NORC data with NRFU/")
TESS_001_data <-
read_dta("TESS_0001_SHANNON_RECR_VARS_STATA.dta")
setwd("C:/Users/roram/Dropbox/TESS Generalizability/NORC data with NRFU/")
TESS_001_data <-
read_dta("TESS_0001_SHANNON_RECR_VARS_STATA.dta")
TESS_001_data <-
read_dta("C:/Users/roram/Dropbox/TESS Generalizability/NORC data with NRFU/TESS_0001_SHANNON_RECR_VARS_STATA.dta")
pacman::p_load(tidyverse)
count(storms)
ncol(storms)
storms
storms %>%
filter(year == 2000) %>%
count()
storms %>%
filter(year == 2000) %>%
distinct(name)
storms %>%
filter(year == 2000) %>%
distinct(name) %>%
arrange(desc(name))
storms %>%
filter(year == 2000) %>%
group_by(name) %>%
count() %>%
arrange(n)
storm_names_2000s <-
filter(storms, year %in% c(2000:2009)) %>%
select(name, year) %>%
distinct()
head(storm_names_2000s)
tail(storm_names_2000s)
storms_per_year <-
storms %>%
select(name, year) %>%
group_by(year) %>%
count()
tail(storms_per_year, 15)
storm_entries_per_year <-
storms %>%
group_by(name, year) %>%
count()
head(storm_entries_per_year, 10)
tail(storm_entries_per_year, 10)
storm_names_2000s <-
filter(storms, year %in% c(2000:2009)) %>%
select(name, year) %>%
distinct()
head(storm_names_2000s)
tail(storm_names_2000s)
storms_per_year <-
storms %>%
select(name, year) %>%
group_by(year) %>%
count()
tail(storms_per_year, 15)
storm_entries_per_year <-
storms %>%
group_by(name, year) %>%
count()
head(storm_entries_per_year, 10)
tail(storm_entries_per_year, 10)
storm_names_2000s <-
filter(storms, year %in% c(2000:2009)) %>%
select(name, year) %>%
distinct()
head(storm_names_2000s)
tail(storm_names_2000s)
storms_per_year <-
storms %>%
select(name, year) %>%
group_by(year) %>%
count()
tail(storms_per_year, 15)
storm_entries_per_year <-
storms %>%
group_by(name, year) %>%
count()
head(storm_entries_per_year, 10)
tail(storm_entries_per_year, 10)
storm_names_2000s <-
filter(storms, year %in% c(2000:2009)) %>%
select(name, year) %>%
distinct()
View(storm_names_2000s)
head(storm_names_2000s)
storms_per_year <-
storms %>%
select(name, year) %>%
group_by(year) %>%
count()
View(storms_per_year)
tail(storms_per_year, 15)
storm_entries_per_year <-
storms %>%
group_by(name, year) %>%
count()
head(storm_entries_per_year, 10)
tail(storm_entries_per_year, 10)
storms %>%
ggplot(aes(x = wind)) +
geom_histogram(color = "Blue", fill = "Red")
storms %>%
filter(year %in% c(1990:2009)) %>%
ggplot(aes(x = pressure)) +
geom_density() +
facet_wrap( ~ year)
storms %>%
group_by(year) %>%
summarise(avg_wind = mean(wind)) %>%
ggplot(aes(x = year, y = avg_wind)) +
geom_point() +
geom_line()
TESS_001_data <-
read_dta("C:/Users/roram/Dropbox/TESS Generalizability/NORC data with NRFU/TESS_0001_SHANNON_RECR_VARS_STATA.dta")
View(TESS_001_data)
max_wind_per_storm <-
storms %>%
group_by(name) %>%
mutate(max_wind = max(wind)) %>%
ungroup() %>%
distinct(year, name, max_wind)
max_wind_per_storm <-
storms %>%
group_by(name, year) %>%
mutate(max_wind = max(wind)) %>%
ungroup() %>%
distinct(year, name, max_wind)
setwd("C:/Users/roram/Dropbox/TESS Generalizability/NORC data with NRFU/")
TESS_001_data <-
read_dta("C:/Users/roram/Dropbox/TESS Generalizability/NORC data with NRFU/TESS_0001_SHANNON_RECR_VARS_STATA.dta")
TESS_003_data <-
read_dta("C:/Users/roram/Dropbox/TESS Generalizability/NORC data with NRFU/TESS_0003_WILLIAMSON_RECR_VARS_STATA.dta")
View(TESS_003_data)
View(TESS_003_data)
## IMPORTING AND TIDYING
setwd("~/Dropbox/TESS Generalizability/Replications/TESS 003 Williamson/")
## IMPORTING AND TIDYING
setwd("~/Dropbox/TESS Generalizability/Replications/TESS_003_Williamson/")
pacman::p_load(shiny)
pacman::p_load(shiny)
install.packages("shiny")
library("shiny")
install.packages("rcpp")
install.packages("installr")
library('installr')
updateR()
updateR()
library(shiny)
head(mtcars)
ggplot(data = mtcars, aes(x = mpg, y = hp)) + geom_point()
install.packages(pacman)
library("pacman")
p_load(tidyverse)
ggplot(data = mtcars, aes(x = mpg, y = hp)) + geom_point()
ggplot(data = mtcars, aes(x = wt, y = hp)) +
geom_point() +
theme_minimal()
ggplot(data = mtcars, aes(x = wt, y = mpg)) +
geom_point() +
theme_minimal()
ggplot(data = mtcars, aes(x = wt, y = mpg)) +
geom_point() +
geom_smooth() +
theme_minimal()
ggplot(data = mtcars, aes(x = wt, y = mpg)) +
geom_point() +
geom_smooth(method = "lm") +
theme_minimal()
ggplot(data = mtcars, aes(x = wt, y = mpg)) +
geom_point() +
geom_smooth(method = "lm") +
theme_minimal()
ggplot(data = mtcars, aes(x = wt, y = mpg)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
theme_minimal()
ggplot(data = mtcars, aes(x = wt, y = mpg)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
theme_minimal() +
facet_wrap(. ~ am)
# Define UI for application that draws a histogram
ui <- fluidPage(
# Application title
titlePanel("Exploring mtcars"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
sliderInput("bins",
"Number of bins:",
min = 1,
max = 50,
value = 30)
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("distPlot")
)
)
)
library(shiny)
# Define UI for application that draws a histogram
ui <- fluidPage(
# Application title
titlePanel("Exploring mtcars"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
sliderInput("bins",
"Number of bins:",
min = 1,
max = 50,
value = 30)
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("distPlot")
)
)
)
# Define server logic required to draw a histogram
server <- function(input, output) {
output$distPlot <- renderPlot({
# generate bins based on input$bins from ui.R
x    <- faithful[, 2]
bins <- seq(min(x), max(x), length.out = input$bins + 1)
# draw the histogram with the specified number of bins
hist(x, breaks = bins, col = 'darkgray', border = 'white')
})
}
# Run the application
shinyApp(ui = ui, server = server)
# Define server logic required to draw a scatterplot
server <- function(input, output) {
output$distPlot <- renderPlot({
# draw the scatterplot
ggplot(mtcars, aes(x = mpg, y = hp)) +
geom_point() +
theme_minimal()
})
}
# Run the application
shinyApp(ui = ui, server = server)
# Define UI for application that draws a histogram
ui <- fluidPage(
# Application title
titlePanel("Exploring mtcars"),
# Sidebar with a slider input for dot size
sidebarLayout(
sidebarPanel(
sliderInput(inputId = "point_size",
label = "dot size",
min = .5,
max = 10,
value = 2)
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("distPlot")
)
)
)
# Define server logic required to draw a scatterplot
server <- function(input, output) {
output$distPlot <- renderPlot({
# draw the scatterplot
ggplot(mtcars, aes(x = mpg, y = hp)) +
geom_point() +
theme_minimal()
})
}
# Run the application
shinyApp(ui = ui, server = server)
# Define server logic required to draw a scatterplot
server <- function(input, output) {
output$distPlot <- renderPlot({
# draw the scatterplot
ggplot(mtcars, aes(x = mpg, y = hp)) +
geom_point(size = input$point_size) +
theme_minimal()
})
}
# Run the application
shinyApp(ui = ui, server = server)
# Define UI for application that draws a histogram
ui <- fluidPage(
# Application title
titlePanel("Exploring mtcars"),
# Sidebar with a slider input for dot size
sidebarLayout(
sidebarPanel(
sliderInput(inputId = "point_size",
label = "dot size",
min = .5,
max = 10,
value = 2),
selectInput(inputId = "xvar",
label = "x variable",
choices = list("mpg" = mpg, "wt" = wt, "hp" = hp),
selected = mpg),
selectInput(inputId = "yvar",
label = "y variable",
choices = list("mpg" = mpg, "wt" = wt, "hp" = hp),
selected = mpg)
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("distPlot")
)
)
)
runApp('C:/Users/roram/Desktop/shiny-ggplot')
runApp('C:/Users/roram/Desktop/shiny-ggplot')
runApp('C:/Users/roram/Desktop/shiny-ggplot')
runApp('C:/Users/roram/Desktop/shiny-ggplot')
names(mtcars)
runApp('C:/Users/roram/Desktop/shiny-ggplot')
runApp('C:/Users/roram/Desktop/shiny-ggplot')
# Define UI for application that draws a histogram
ui <- fluidPage(
# Application title
titlePanel("Exploring mtcars"),
# Sidebar with a slider input for dot size
sidebarLayout(
sidebarPanel(
sliderInput(inputId = "point_size",
label = "dot size",
min = .5,
max = 10,
value = 2),
selectInput(inputId = "xvar",
label = "x variable",
choices = names(mtcars)[1:7]),
selected = mpg),
selectInput(inputId = "yvar",
label = "y variable",
choices = list(names(mtcars)[1:7]),
selected = mpg)
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("distPlot")
)
)
# Define UI for application that draws a histogram
ui <- fluidPage(
# Application title
titlePanel("Exploring mtcars"),
# Sidebar with a slider input for dot size
sidebarLayout(
sidebarPanel(
sliderInput(inputId = "point_size",
label = "dot size",
min = .5,
max = 10,
value = 2),
selectInput(inputId = "xvar",
label = "x variable",
choices = names(mtcars)[1:7]),
selected = mpg),
selectInput(inputId = "yvar",
label = "y variable",
choices = list(names(mtcars)[1:7]),
selected = mpg)
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("distPlot")
)
)
runApp('C:/Users/roram/Desktop/shiny-ggplot')
# draw the scatterplot
ggplot(mtcars, aes_string(x = input$xvar, y = input$yvar)) +
geom_point(size = input$point_size) +
stat_smooth() +
theme_minimal()
runApp('C:/Users/roram/Desktop/shiny-ggplot')
runApp('C:/Users/roram/Desktop/shiny-ggplot')
# Define UI for application that draws a histogram
ui <- fluidPage(
# Application title
titlePanel("Exploring mtcars"),
# Sidebar with a slider input for dot size
sidebarLayout(
sidebarPanel(
sliderInput(inputId = "point_size",
label = "dot size",
min = .5,
max = 10,
value = 2),
selectInput(inputId = "xvar",
label = "x variable",
choices = names(mtcars)[1:7],
selected = mpg),
selectInput(inputId = "yvar",
label = "y variable",
choices = names(mtcars)[1:7],
selected = hp)
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("distPlot")
)
)
)
runApp('C:/Users/roram/Desktop/shiny-ggplot')
runApp('C:/Users/roram/Desktop/shiny-ggplot')
runApp('C:/Users/roram/Desktop/shiny-ggplot')
runApp('C:/Users/roram/Desktop/shiny-ggplot')
runApp('C:/Users/roram/Desktop/shiny-ggplot')
runApp('C:/Users/roram/Desktop/shiny-ggplot')
runApp('C:/Users/roram/Desktop/shiny-ggplot')
runApp('C:/Users/roram/Desktop/shiny-ggplot')
runApp('C:/Users/roram/Desktop/shiny-ggplot')
portfolio <- function(start_bal = 1000000,
withdrawal = .04,
return_ave = .09,
ret_vol = .1,
inf_ave = .03,
inf_vol = .035,
nsims = 3) {
(start_bal - (start_bal * withdrawal)) * (1 = return_ave) - ((start_bal * withdrawal) * (1 + inf_ave))
}
portfolio()
portfolio <- function(start_bal = 1000000,
withdrawal = .04,
return_ave = .09,
ret_vol = .1,
inf_ave = .03,
inf_vol = .035,
nsims = 3) {
(start_bal - (start_bal * withdrawal)) * (1 + return_ave) - ((start_bal * withdrawal) * (1 + inf_ave))
}
portfolio()
setwd("~/thesis datasets/political distrust/")
pacman::p_load(tidyverse, haven)
mydata <- read_dta("Arriola_Grossman_JOP.dta")
View(mydata)
