# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
sliderInput("bins",
"Number of bins:",
min = 1,
max = 50,
value = 30)
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("distPlot")
)
)
)
# Define server logic required to draw a histogram
server <- function(input, output) {
output$distPlot <- renderPlot({
# generate bins based on input$bins from ui.R
x    <- faithful[, 2]
bins <- seq(min(x), max(x), length.out = input$bins + 1)
# draw the histogram with the specified number of bins
hist(x, breaks = bins, col = 'darkgray', border = 'white')
})
}
# Run the application
shinyApp(ui = ui, server = server)
# Define server logic required to draw a scatterplot
server <- function(input, output) {
output$distPlot <- renderPlot({
# draw the scatterplot
ggplot(mtcars, aes(x = mpg, y = hp)) +
geom_point() +
theme_minimal()
})
}
# Run the application
shinyApp(ui = ui, server = server)
# Define UI for application that draws a histogram
ui <- fluidPage(
# Application title
titlePanel("Exploring mtcars"),
# Sidebar with a slider input for dot size
sidebarLayout(
sidebarPanel(
sliderInput(inputId = "point_size",
label = "dot size",
min = .5,
max = 10,
value = 2)
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("distPlot")
)
)
)
# Define server logic required to draw a scatterplot
server <- function(input, output) {
output$distPlot <- renderPlot({
# draw the scatterplot
ggplot(mtcars, aes(x = mpg, y = hp)) +
geom_point() +
theme_minimal()
})
}
# Run the application
shinyApp(ui = ui, server = server)
# Define server logic required to draw a scatterplot
server <- function(input, output) {
output$distPlot <- renderPlot({
# draw the scatterplot
ggplot(mtcars, aes(x = mpg, y = hp)) +
geom_point(size = input$point_size) +
theme_minimal()
})
}
# Run the application
shinyApp(ui = ui, server = server)
# Define UI for application that draws a histogram
ui <- fluidPage(
# Application title
titlePanel("Exploring mtcars"),
# Sidebar with a slider input for dot size
sidebarLayout(
sidebarPanel(
sliderInput(inputId = "point_size",
label = "dot size",
min = .5,
max = 10,
value = 2),
selectInput(inputId = "xvar",
label = "x variable",
choices = list("mpg" = mpg, "wt" = wt, "hp" = hp),
selected = mpg),
selectInput(inputId = "yvar",
label = "y variable",
choices = list("mpg" = mpg, "wt" = wt, "hp" = hp),
selected = mpg)
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("distPlot")
)
)
)
runApp('C:/Users/roram/Desktop/shiny-ggplot')
runApp('C:/Users/roram/Desktop/shiny-ggplot')
runApp('C:/Users/roram/Desktop/shiny-ggplot')
runApp('C:/Users/roram/Desktop/shiny-ggplot')
names(mtcars)
runApp('C:/Users/roram/Desktop/shiny-ggplot')
runApp('C:/Users/roram/Desktop/shiny-ggplot')
# Define UI for application that draws a histogram
ui <- fluidPage(
# Application title
titlePanel("Exploring mtcars"),
# Sidebar with a slider input for dot size
sidebarLayout(
sidebarPanel(
sliderInput(inputId = "point_size",
label = "dot size",
min = .5,
max = 10,
value = 2),
selectInput(inputId = "xvar",
label = "x variable",
choices = names(mtcars)[1:7]),
selected = mpg),
selectInput(inputId = "yvar",
label = "y variable",
choices = list(names(mtcars)[1:7]),
selected = mpg)
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("distPlot")
)
)
# Define UI for application that draws a histogram
ui <- fluidPage(
# Application title
titlePanel("Exploring mtcars"),
# Sidebar with a slider input for dot size
sidebarLayout(
sidebarPanel(
sliderInput(inputId = "point_size",
label = "dot size",
min = .5,
max = 10,
value = 2),
selectInput(inputId = "xvar",
label = "x variable",
choices = names(mtcars)[1:7]),
selected = mpg),
selectInput(inputId = "yvar",
label = "y variable",
choices = list(names(mtcars)[1:7]),
selected = mpg)
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("distPlot")
)
)
runApp('C:/Users/roram/Desktop/shiny-ggplot')
# draw the scatterplot
ggplot(mtcars, aes_string(x = input$xvar, y = input$yvar)) +
geom_point(size = input$point_size) +
stat_smooth() +
theme_minimal()
runApp('C:/Users/roram/Desktop/shiny-ggplot')
runApp('C:/Users/roram/Desktop/shiny-ggplot')
# Define UI for application that draws a histogram
ui <- fluidPage(
# Application title
titlePanel("Exploring mtcars"),
# Sidebar with a slider input for dot size
sidebarLayout(
sidebarPanel(
sliderInput(inputId = "point_size",
label = "dot size",
min = .5,
max = 10,
value = 2),
selectInput(inputId = "xvar",
label = "x variable",
choices = names(mtcars)[1:7],
selected = mpg),
selectInput(inputId = "yvar",
label = "y variable",
choices = names(mtcars)[1:7],
selected = hp)
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("distPlot")
)
)
)
runApp('C:/Users/roram/Desktop/shiny-ggplot')
runApp('C:/Users/roram/Desktop/shiny-ggplot')
runApp('C:/Users/roram/Desktop/shiny-ggplot')
runApp('C:/Users/roram/Desktop/shiny-ggplot')
runApp('C:/Users/roram/Desktop/shiny-ggplot')
runApp('C:/Users/roram/Desktop/shiny-ggplot')
runApp('C:/Users/roram/Desktop/shiny-ggplot')
runApp('C:/Users/roram/Desktop/shiny-ggplot')
runApp('C:/Users/roram/Desktop/shiny-ggplot')
portfolio <- function(start_bal = 1000000,
withdrawal = .04,
return_ave = .09,
ret_vol = .1,
inf_ave = .03,
inf_vol = .035,
nsims = 3) {
(start_bal - (start_bal * withdrawal)) * (1 = return_ave) - ((start_bal * withdrawal) * (1 + inf_ave))
}
portfolio()
portfolio <- function(start_bal = 1000000,
withdrawal = .04,
return_ave = .09,
ret_vol = .1,
inf_ave = .03,
inf_vol = .035,
nsims = 3) {
(start_bal - (start_bal * withdrawal)) * (1 + return_ave) - ((start_bal * withdrawal) * (1 + inf_ave))
}
portfolio()
pacman::p_load(usingr)
pacman::p_load(usingR)
pacman::p_load("usingR")
pacman::p_load("usingR")
install.packages(usingR)
pacman::p_load(UsingR)
install.packages(UsingR)
View(.park)
View(.park)
central.park
# Chunk 1
pacman::p_load(tidyverse)
rm(list = ls())
setwd("~/thesis datasets/political distrust/Corruption perceptions index/CSV files/")
dta_12_19 <- read_csv("Consolidated_Data_CPI_2012-2019.csv")
dta_10 <- read_csv("CPI-2010-new_200601_105629.csv")
dta_11 <- read_csv("CPI-2011-new_200601_104308.csv")
# Chunk 2
sort(unique(dta_12_19$Country))
dta_12_19_std <-
dta_12_19 %>%
mutate(Country = case_when(Country == "Argenana" ~ "Argentina",
Country == "Bosnia and" ~ "Bosnia and Herzegovina",
Country == "Brunei Dar" ~ "Brunei Darussalam",
Country == "Burkina Fas" ~ "Burkina Faso",
Country == "Central Afri" ~ "Central African Republic",
Country == "Cote d'Ivoir" ~ "Cote d'Ivoire",
Country == "Croaaa" ~ "Croatia",
Country == "Czech Repu" ~ "Czechia",
Country == "Democraac" ~ "Democratic Republic of the Congo",
Country == "Djiboua" ~ "Djibouti",
Country == "Dominican" ~ "Dominican Republic",
Country == "Equatorial" ~ "Equatorial Guinea",
Country == "Eswaani" ~ "Eswatini",
Country == "Guinea Biss" ~ "Guinea Bissau",
Country == "Haia" ~ "Haiti",
Country == "Korea, Nort" ~ "Korea, North",
Country == "Korea, Sout" ~ "Korea, South",
Country == "Luxembour" ~ "Luxembourg",
Country == "Madagasca" ~ "Madagascar",
Country == "Mauriaus" ~ "Mauritius",
Country == "Montenegr" ~ "Montenegro",
Country == "Mozambiq" ~ "Mozambique",
Country == "Netherland" ~ "Netherlands",
Country == "New Zealan" ~ "New Zealand",
Country == "North Mac" ~ "North Macedonia",
Country == "Papua New" ~ "Papua New Guinea",
Country == "Saint Vince" ~ "Saint Vincent and the Grenadines",
Country == "Sao Tome a" ~ "Sao Tome and Principe",
Country == "Saudi Arabi" ~ "Saudi Arabia",
Country == "Sierra Leon" ~ "Sierra Leon",
Country == "Solomon Is" ~ "Solomon Islands",
Country == "South Afric" ~ "South Africa",
Country == "South Suda" ~ "South Sudan",
Country == "Trinidad an" ~ "Trinidad and Tobago",
Country == "Turkmenist" ~ "Turkmenistan",
Country == "United Ara" ~ "United Arab Emirates",
Country == "United King" ~ "United Kingdom",
Country == "United Stat" ~ "United States",
TRUE ~ as.character(Country)
)
)
sort(unique(dta_12_19_std$Country))
dta_12_19_std <-
dta_12_19_std %>%
select(Country,
Year,
ISO3,
Region,
CPI_Score,
Rank,
Sources, Standard_Error)
# Chunk 3
dta_10
sort(unique(dta_10$country))
dta_10_std <-
dta_10 %>%
mutate(score = score*10,
Year = 2010) %>%
select(Country = country,
ISO3 = iso,
Region = region,
CPI_Score = score,
Rank = rank,
Year) %>%
mutate(Country = case_when(Country == "Korea (South)" ~ "South Korea",
TRUE ~ as.character(Country)))
# Chunk 4
dta_11
sort(unique(dta_11$country))
dta_11_std <-
dta_11 %>%
mutate(score = score*10,
Year = 2011) %>%
select(Country = country,
ISO3 = iso,
Region = region,
CPI_Score = score,
Rank = rank,
Year) %>%
mutate(Country = case_when(Country == "Korea (South)" ~ "South Korea",
TRUE ~ as.character(Country)))
# Chunk 5
setwd("C:/Users/roram/Documents/thesis datasets/attacks/")
pacman::p_load(tidyverse, rvest)
awsd <- read_csv("aid worker security database/security_incidents_2021-11-15.csv")
url <- "https://www.worldometers.info/geography/how-many-countries-in-africa/"
AF_countries <-
url %>%
read_html() %>%
html_table()
countries <- AF_countries[[1]][2]
countries <- as.character(countries$Country)
countries
countries_new <-
c("Algeria", "Angola", "Benin", "Botswana", "Burkina Faso", "Burundi", "Cabo Verde", "Cameroon", "Central African Republic", "Chad", "Comoros", "Congo", "CÃ´te d'Ivoire", "Djibouti", "DR Congo", "Egypt", "Equatorial Guinea", "Eritrea", "Eswatini", "Ethiopia", "Gabon", "Gambia", "Ghana", "Guinea", "Guinea-Bissau", "Kenya", "Lesotho", "Liberia", "Libya", "Madagascar", "Malawi", "Mali", "Mauritania", "Mauritius", "Morocco", "Mozambique", "Namibia", "Niger", "Nigeria", "Rwanda", "Sao Tome & Principe", "Senegal", "Seychelles", "Sierra Leone", "Somalia", "South Africa", "South Sudan", "Sudan", "Tanzania", "Togo", "Tunisia", "Uganda", "Zambia", "Zimbabwe")
filtered <-
awsd %>%
filter(Country %in% countries_new,
Year %in% c(2012:2017))
attack_dta <-
filtered %>%
group_by(Year, Country) %>%
summarise(incidents = n()) %>%
pivot_wider(names_from = Year, values_from = incidents)
attack_dta[is.na(attack_dta)] <- 0
# Chunk 6
intensity_dta <-
filtered %>%
select(Year, Country, total_affected = `Total affected`)
intensity_dta$total_affected <- as.numeric(intensity_dta$total_affected)
intensity_dta <-
intensity_dta %>%
group_by(Year, Country) %>%
summarise(intensity = mean(total_affected))
intensity_dta <- intensity_dta[order(intensity_dta$Country), ]
intensity_dta_pivot <-
intensity_dta %>%
pivot_wider(names_from = Year, values_from = intensity)
intensity_dta_pivot[is.na(intensity_dta_pivot)] <- 0
# Chunk 7
dta_10_piv <-
dta_10_std %>%
select(Country,
CPI_Score,
Year) %>%
pivot_wider(names_from = Year, values_from = CPI_Score)
dta_12_19_piv <-
dta_12_19_std %>%
select(Country,
CPI_Score,
Year) %>%
pivot_wider(names_from = Year, values_from = CPI_Score)
dta_11_piv <-
dta_11_std %>%
select(Country,
CPI_Score,
Year) %>%
pivot_wider(names_from = Year, values_from = CPI_Score)
CPI_dta_joined <-
inner_join(dta_10_piv, dta_12_19_piv, by = "Country")
CPI_dta <-
inner_join(CPI_dta_joined, dta_11_piv)%>%
select(Country, "2010_CPI" = "2010",
"2011_CPI" = "2011",
"2012_CPI" = "2012",
"2013_CPI" = "2013",
"2014_CPI" = "2014",
"2015_CPI" = "2015",
"2016_CPI" = "2016",
"2017_CPI" = "2017",
"2018_CPI" = "2018",
"2019_CPI" = "2019") %>%
filter(Country %in% as.character(attack_dta$Country))
# Chunk 8
attack_dta <-
attack_dta %>%
filter(Country %in% CPI_dta$Country)
CPI_dta <- CPI_dta[order(CPI_dta$Country), ]
attack_dta <- attack_dta[order(attack_dta$Country), ]
CPI_vector <-
c(CPI_dta$`2013_CPI`, CPI_dta$`2014_CPI`, CPI_dta$`2015_CPI`, CPI_dta$`2016_CPI`, CPI_dta$`2017_CPI`)
attack_vector <-
c(attack_dta$`2013`, attack_dta$`2014`, attack_dta$`2015`, attack_dta$`2016`, attack_dta$`2017`)
cor.test(CPI_vector, attack_vector)
prevalence_results <- cor.test(CPI_vector, attack_vector)
prevalence_results
plot(CPI_vector, attack_vector)
ggplot(data = as.data.frame(CPI_vector, attack_vector), aes(x = CPI_vector, y = attack_vector)) +
geom_jitter() +
geom_smooth(method = lm) +
labs(title = "Effect of Corruption Perceptions Index on Attacks of Aid Workers",
subtitle = "data: Aid Worker Security Database and Corruption Perception Index",
x = "Corruption Perception Index Score",
y = "Amount of Attacks") +
theme_bw() #+
#ggsave(filename = "CPI_on_Prevalence.png", path = "~/thesis code/")
# Chunk 9
intensity_dta_pivot <-
intensity_dta_pivot %>%
filter(Country %in% CPI_dta$Country)
intensity_vector <- c(intensity_dta_pivot$`2013`, intensity_dta_pivot$`2014`, intensity_dta_pivot$`2015`, intensity_dta_pivot$`2016`, intensity_dta_pivot$`2017`)
cor.test(CPI_vector, intensity_vector)
mean(intensity_vector[intensity_vector>0])
intensity_vector[ intensity_vector> 0]
ggplot(data = as.data.frame(CPI_vector, intensity_vector), aes(x = CPI_vector, y = intensity_vector)) +
geom_jitter() +
geom_smooth(method = lm) +
labs(title = "Effect of Corruption Perceptions Index on Intensity of Attacks of Aid Workers",
subtitle = "data: Aid Worker Security Database and Corruption Perception Index",
x = "Corruption Perception Index Score",
y = "Intensity of Attacks") +
theme_bw() #+
#ggsave(filename = "CPI_on_Intensity_no_lm.png", path = "~/thesis code/")
# Chunk 10
intensity_dta <-
filtered %>%
select(Year, Country, total_affected = `Total affected`)
intensity_dta$total_affected <- as.numeric(intensity_dta$total_affected)
intensity_dta <-
intensity_dta %>%
group_by(Year, Country) %>%
summarise(intensity = sum(total_affected))
View(intensity_dta)
intensity_dta <- intensity_dta[order(intensity_dta$Country), ]
intensity_dta_pivot <-
intensity_dta %>%
pivot_wider(names_from = Year, values_from = intensity)
intensity_dta_pivot[is.na(intensity_dta_pivot)] <- 0
intensity_dta <-
filtered %>%
select(Year, Country, total_affected = `Total affected`)
intensity_dta$total_affected <- as.numeric(intensity_dta$total_affected)
intensity_dta <-
intensity_dta %>%
group_by(Year, Country) %>%
summarise(intensity = mean(total_affected))
intensity_dta <- intensity_dta[order(intensity_dta$Country), ]
intensity_dta_pivot <-
intensity_dta %>%
pivot_wider(names_from = Year, values_from = intensity)
intensity_dta_pivot[is.na(intensity_dta_pivot)] <- 0
intensity_dta <-
filtered %>%
select(Year, Country, total_affected = `Total affected`)
intensity_dta$total_affected <- as.numeric(intensity_dta$total_affected)
intensity_dta_sum <-
intensity_dta %>%
group_by(Year, Country) %>%
summarise(intensity = sum(total_affected))
intensity_dta_sum <- intensity_dta_sum[order(intensity_dta_sum$Country), ]
View(intensity_dta_sum)
intensity_dta_sum_pivot <-
intensity_dta_sum %>%
pivot_wider(names_from = Year, values_from = intensity)
intensity_dta_sum_pivot[is.na(intensity_dta_sum_pivot)] <- 0
intensity_dta_sum_pivot <-
intensity_dta_sum %>%
pivot_wider(names_from = Year, values_from = intensity)
View(intensity_dta_sum_pivot)
intensity_vector_2 <- c(intensity_dta_sum_pivot$`2013`, intensity_dta_sum_pivot$`2014`, intensity_dta_sum_pivot$`2015`, intensity_dta_sum_pivot$`2016`, intensity_dta_sum_pivot$`2017`)
intensity_dta_sum_pivot[is.na(intensity_dta_sum_pivot)] <- 0
intensity_vector_2 <- c(intensity_dta_sum_pivot$`2013`, intensity_dta_sum_pivot$`2014`, intensity_dta_sum_pivot$`2015`, intensity_dta_sum_pivot$`2016`, intensity_dta_sum_pivot$`2017`)
intensity_vector_2 <- intensity_vector_2[intensity_vector_2 > 0]
CPI_vector <- CPI_vector[intensity_vector_2 > 0]
CPI_vector_2 <- CPI_vector_2[intensity_vector_2 > 0]
CPI_vector <-
c(CPI_dta$`2013_CPI`, CPI_dta$`2014_CPI`, CPI_dta$`2015_CPI`, CPI_dta$`2016_CPI`, CPI_dta$`2017_CPI`)
CPI_vector_2 <- CPI_vector[intensity_vector_2 > 0]
intensity_vector_2 <- c(intensity_dta_sum_pivot$`2013`, intensity_dta_sum_pivot$`2014`, intensity_dta_sum_pivot$`2015`, intensity_dta_sum_pivot$`2016`, intensity_dta_sum_pivot$`2017`)
CPI_vector_2 <- CPI_vector[intensity_vector_2 > 0]
intensity_vector_2 <- intensity_vector_2[intensity_vector_2 > 0]
cor.test(CPI_vector_2, intensity_vector_2)
as.data.frame(cpi_vector_2, intensity_vector_2) %>%
ggplot(aes(x = CPI_vector_2, y = intensity_vector_2)) +
geom_point()
as.data.frame(CPI_vector_2, intensity_vector_2) %>%
ggplot(aes(x = CPI_vector_2, y = intensity_vector_2)) +
geom_point()
mean(intensity_vector_2)
View(awsd)
View(CPI_dta)
View(CPI_dta_joined)
